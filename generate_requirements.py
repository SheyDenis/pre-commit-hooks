import os
import sys
from typing import Dict, Final, List, Union

import toml

OUTPUT_FILE: Final[str] = 'pipfile_requirements.txt'
OUTPUT_FILE_HEADER: Final[str] = '# Generated by {by_what}, DO NOT EDIT.'

PackageVersion = Union[Dict[str, str], str]


def get_package_requirements(package: str, version: PackageVersion):
    packages: List[str] = []
    package_name = package
    package_version = ''
    if isinstance(version, dict):
        if 'sys_platform' in version and version['sys_platform'].split()[1].strip() != sys.platform:
            return packages
        if 'version' in version and version['version'] != '*':
            package_version = version['version']
        if 'extras' in version:
            for extra in version['extras']:
                packages.append(f'{package}[{extra}]{package_version}')
    else:
        if isinstance(version, str) and version != '*':
            package_name = f'{package}{version}'
    packages.append(f'{package_name}{package_version}')
    return packages


def get_requirements() -> List[str]:
    requirements: List[str] = []
    with open('Pipfile', 'r', encoding='utf8') as fh:
        pipfile = toml.load(fh)

    for k, v in pipfile['packages'].items():
        requirements.extend(get_package_requirements(k, v))

    return requirements


if __name__ == '__main__':
    with open(OUTPUT_FILE, 'w', encoding='utf8') as fh:
        fh.write('\n'.join([OUTPUT_FILE_HEADER.format(by_what=os.path.basename(__file__)), *get_requirements(), '']))
